import { applicationDetailPagePO, ComponentsPagePO } from '../support/pageObjects/createApplication-po';
import { ApplicationDetailPage } from '../support/pages/ApplicationDetailPage';
import { ComponentPage } from '../support/pages/ComponentsPage';
import { LatestCommitsTabPage } from '../support/pages/tabs/LatestCommitsTabPage';
import { DetailsTab, PipelinerunsTabPage, TaskRunsTab } from '../support/pages/tabs/PipelinerunsTabPage';
import { Applications } from '../utils/Applications';
import { Common } from '../utils/Common';
import { UIhelper } from '../utils/UIhelper';

describe('Advance Happy path', () => {
  const applicationName = Common.generateAppName();
  const applicationDetailPage = new ApplicationDetailPage();
  const componentPage = new ComponentPage();
  const latestCommitsTabPage = new LatestCommitsTabPage();
  const sourceCodeRepoLink = 'https://github.com/devfile-samples/devfile-sample-go-basic';
  const repoName = Common.generateAppName('devfile-sample-go-basic');
  const repoOwner = 'redhat-hac-qe';
  const repoLink = `https://github.com/${repoOwner}/${repoName}`;

  let componentName = Common.generateAppName('go');
  const componentInfo = new Map<string, string>([
    ['componentName', 'go'],
    ['deploymentBodyOriginal', 'Hello, !'],
    ['deploymentBodyUpdated', 'Bye, !'],
    ['filePath', 'main.go'],
    ['goFileBase64Original', 'cGFja2FnZSBtYWluCgppbXBvcnQgKAoJImZtdCIKCSJuZXQvaHR0cCIKCSJmbGFnIgopCnZhciBwb3J0ID0gZmxhZy5JbnQoInAiLCA4MDgwLCAic2VydmVyIHBvcnQiKQoKZnVuYyBtYWluKCkgewoJZmxhZy5QYXJzZSgpCglodHRwLkhhbmRsZUZ1bmMoIi8iLCBIZWxsb1NlcnZlcikKCWh0dHAuTGlzdGVuQW5kU2VydmUoZm10LlNwcmludGYoIjAuMC4wLjA6JWQiLCAqcG9ydCksIG5pbCkKfQoKZnVuYyBIZWxsb1NlcnZlcih3IGh0dHAuUmVzcG9uc2VXcml0ZXIsIHIgKmh0dHAuUmVxdWVzdCkgewoJZm10LkZwcmludGYodywgIkhlbGxvLCAlcyEiLCByLlVSTC5QYXRoWzE6XSkKfQo='],
    ['goFileBase64Updated', 'cGFja2FnZSBtYWluCgppbXBvcnQgKAoJImZtdCIKCSJuZXQvaHR0cCIKCSJmbGFnIgopCnZhciBwb3J0ID0gZmxhZy5JbnQoInAiLCA4MDgwLCAic2VydmVyIHBvcnQiKQoKZnVuYyBtYWluKCkgewoJZmxhZy5QYXJzZSgpCglodHRwLkhhbmRsZUZ1bmMoIi8iLCBIZWxsb1NlcnZlcikKCWh0dHAuTGlzdGVuQW5kU2VydmUoZm10LlNwcmludGYoIjAuMC4wLjA6JWQiLCAqcG9ydCksIG5pbCkKfQoKZnVuYyBIZWxsb1NlcnZlcih3IGh0dHAuUmVzcG9uc2VXcml0ZXIsIHIgKmh0dHAuUmVxdWVzdCkgewoJZm10LkZwcmludGYodywgIkJ5ZSwgJXMhIiwgci5VUkwuUGF0aFsxOl0pCn0K'],
    ['goFileSHAOriginal', 'a0d3381107a344f57e4a4f7edb82eab9c457aa0f'],
    ['commitMessageUpdate', 'Changing the string value inside HelloServer func'],
  ]);

  const commitTitle = 'Merging a PR by Stonesoup';
  const commitMessage = 'This PR was auto-generated by appstudio-ci__bot';

  before(() => {
    Common.createGitHubRepository(repoName);
    Common.importCodeToGitHubRepository(sourceCodeRepoLink, repoName);
  });

  after(function () {
    Common.deleteGitHubRepository(repoOwner, repoName);
    Applications.deleteApplication(applicationName);
  });

  describe('Create an Application with a component', () => {
    it('Set Application Name', () => {
      Applications.createApplication(applicationName);
    });

    it('Add a component to Application', () => {
      Applications.createComponent(repoLink, componentName, 'Go', true);
    });
  });

  describe('Trigger a new Pipelinerun related to push event', () => {
    it('Merge the auto-generated PR, and verify the event status on modal', () => {
      componentPage.checkStatusOnModal(ComponentsPagePO.customBuildPendingState);

      latestCommitsTabPage.mergePR(repoOwner, repoName, 1, commitTitle, commitMessage);

      componentPage.checkStatusOnModal(ComponentsPagePO.customBuildReadyState);
      componentPage.closeModal();
    });

    it('Validate the component', () => {
      Applications.checkComponentInListView(
        componentName,
        applicationName,
        'Build Running',
        'Custom build',
      );
    });
  });

  describe('Explore "Pipeline runs" Tab', () => {
    it('Verify the Pipeline run details and Task runs', () => {
      Applications.goToPipelinerunsTab();
      UIhelper.getTableRow('Pipeline run List', 'Running').contains(`${componentName}-on-push`).invoke('text').then((pipelinerunName) => {
        PipelinerunsTabPage.clickOnRunningPipelinerun(componentName);
        DetailsTab.waitUntilStatusIsNotRunning();
        DetailsTab.checkStatusSucceeded(TaskRunsTab.getAdvancedTaskNamesList(pipelinerunName));
      })
    });
  });

  describe('Explore "Latest commits" Tab', () => {
    it('Verify the Commits List view', () => {
      Applications.clickBreadcrumbLink('Pipeline runs');
      Applications.goToLatestCommitsTab();
      UIhelper.verifyRowInTable('Commit List', commitTitle, ['main', componentName, 'hac-test', 'Succeeded'])
    });
  });

  describe('Check Component Deployment', () => {
    it('Verify the status code and response body of the deployment URL of each component', () => {
      Applications.goToComponentsTab();

      applicationDetailPage.expandDetails(componentName);

      cy.get(applicationDetailPagePO.route(componentName), { timeout: 240000 })
        .invoke('text')
        .then((route) => {
          Common.checkResponseBodyAndStatusCode(
            route,
            componentInfo.get('deploymentBodyOriginal'),
            5000,
          );
        });

      Applications.checkComponentStatus(componentName, 'Build Succeeded');
    });
  });

  describe('Add a new commit and verify changes in the Route', () => {
    it('Add a new commit with changes to a file', () => {
      latestCommitsTabPage.editFile(
        repoLink,
        componentInfo.get('filePath'),
        componentInfo.get('commitMessageUpdate'),
        componentInfo.get('goFileBase64Updated'),
        componentInfo.get('goFileSHAOriginal'),
      );
    });

    it('Check the new Pipeline run', () => {
      Applications.goToPipelinerunsTab();
      UIhelper.getTableRow('Pipeline run List', 'Running').contains(`${componentName}-on-push`).invoke('text').then((pipelinerunName) => {
        PipelinerunsTabPage.clickOnRunningPipelinerun(componentName);
        DetailsTab.waitUntilStatusIsNotRunning();
        DetailsTab.checkStatusSucceeded(TaskRunsTab.getAdvancedTaskNamesList(pipelinerunName));
      })
    });

    it('Verify the Commits List view', () => {
      Applications.clickBreadcrumbLink('Pipeline runs');
      Applications.goToLatestCommitsTab();
      UIhelper.verifyRowInTable('Commit List', componentInfo.get('commitMessageUpdate'), ['main', componentName, 'hac-test', 'Succeeded'])
    });

    it('Verify that the component deployment reflects latest changes', () => {
      Applications.goToComponentsTab();

      applicationDetailPage.expandDetails(componentName);

      cy.get(applicationDetailPagePO.route(componentName), { timeout: 240000 })
        .invoke('text')
        .then((route) => {
          Common.checkResponseBodyAndStatusCode(
            route,
            componentInfo.get('deploymentBodyUpdated'),
            20000, 0, 20
          );
        });

      Applications.checkComponentStatus(componentName, 'Build Succeeded');
    });
  });
});

import { applicationDetailPagePO } from '../support/pageObjects/createApplication-po';
import { ApplicationDetailPage } from '../support/pages/ApplicationDetailPage';
import { ComponentPage } from '../support/pages/ComponentsPage';
import { IntegrationTestsTabPage } from '../support/pages/tabs/IntegrationTestsTabPage';
import { LatestCommitsTabPage } from '../support/pages/tabs/LatestCommitsTabPage';
import {
  DetailsTab,
  PipelinerunsTabPage,
  TaskRunsTab,
} from '../support/pages/tabs/PipelinerunsTabPage';
import { Applications } from '../utils/Applications';
import { Common } from '../utils/Common';
import { UIhelper } from '../utils/UIhelper';

describe('Advance Happy path', () => {
  const applicationName = Common.generateAppName();
  const applicationDetailPage = new ApplicationDetailPage();
  const componentPage = new ComponentPage();
  const latestCommitsTabPage = new LatestCommitsTabPage();
  const integrationTestsTabPage = new IntegrationTestsTabPage();
  const sourceCodeRepoLink = 'https://github.com/devfile-samples/devfile-sample-go-basic';
  const repoName = Common.generateAppName('devfile-sample-go-basic');
  const repoOwner = 'redhat-hac-qe';
  const repoLink = `https://github.com/${repoOwner}/${repoName}`;
  const gitHubUser = Cypress.env('GH_USERNAME');

  let componentName = Common.generateAppName('go');
  const componentInfo = new Map<string, string>([
    ['componentName', 'go'],
    ['deploymentBodyOriginal', 'Hello, !'],
    ['deploymentBodyUpdated', 'Bye, !'],
    ['filePath', 'main.go'],
    [
      'goFileBase64Original',
      'cGFja2FnZSBtYWluCgppbXBvcnQgKAoJImZtdCIKCSJuZXQvaHR0cCIKCSJmbGFnIgopCnZhciBwb3J0ID0gZmxhZy5JbnQoInAiLCA4MDgwLCAic2VydmVyIHBvcnQiKQoKZnVuYyBtYWluKCkgewoJZmxhZy5QYXJzZSgpCglodHRwLkhhbmRsZUZ1bmMoIi8iLCBIZWxsb1NlcnZlcikKCWh0dHAuTGlzdGVuQW5kU2VydmUoZm10LlNwcmludGYoIjAuMC4wLjA6JWQiLCAqcG9ydCksIG5pbCkKfQoKZnVuYyBIZWxsb1NlcnZlcih3IGh0dHAuUmVzcG9uc2VXcml0ZXIsIHIgKmh0dHAuUmVxdWVzdCkgewoJZm10LkZwcmludGYodywgIkhlbGxvLCAlcyEiLCByLlVSTC5QYXRoWzE6XSkKfQo=',
    ],
    [
      'goFileBase64Updated',
      'cGFja2FnZSBtYWluCgppbXBvcnQgKAoJImZtdCIKCSJuZXQvaHR0cCIKCSJmbGFnIgopCnZhciBwb3J0ID0gZmxhZy5JbnQoInAiLCA4MDgwLCAic2VydmVyIHBvcnQiKQoKZnVuYyBtYWluKCkgewoJZmxhZy5QYXJzZSgpCglodHRwLkhhbmRsZUZ1bmMoIi8iLCBIZWxsb1NlcnZlcikKCWh0dHAuTGlzdGVuQW5kU2VydmUoZm10LlNwcmludGYoIjAuMC4wLjA6JWQiLCAqcG9ydCksIG5pbCkKfQoKZnVuYyBIZWxsb1NlcnZlcih3IGh0dHAuUmVzcG9uc2VXcml0ZXIsIHIgKmh0dHAuUmVxdWVzdCkgewoJZm10LkZwcmludGYodywgIkJ5ZSwgJXMhIiwgci5VUkwuUGF0aFsxOl0pCn0K',
    ],
    ['goFileSHAOriginal', 'a0d3381107a344f57e4a4f7edb82eab9c457aa0f'],
    ['firstCommitTitle', 'firstCommit'],
    ['firstCommitMessage', 'This PR was auto-generated by appstudio-ci__bot'],
    ['updatedCommitMessage', 'secondCommit'],
  ]);

  const integrationTestDetails = new Map<string, string>([
    ['integrationTestName', Common.generateAppName('integration-tests')],
    ['integrationTestNameTemp', Common.generateAppName('integration-tests-temp')],
    ['imageBundle', 'quay.io/redhat-appstudio/example-tekton-bundle:integration-pipeline-fail'],
    ['pipelineToRun', 'integration-pipeline-fail'],
    ['imageBundleEdit', 'quay.io/redhat-appstudio/example-tekton-bundle:integration-pipeline-pass'],
    ['pipelineToRunEdit', 'integration-pipeline-pass'],
  ]);

  const integrationTestTaskNames = ['task-success', 'task-success-2', 'task-skipped'];

  before(() => {
    Common.createGitHubRepository(repoName);
    Common.importCodeToGitHubRepository(sourceCodeRepoLink, repoName);
  });

  after(function () {
    Common.deleteGitHubRepository(repoOwner, repoName);
    Applications.deleteApplication(applicationName);
  });

  describe('Create an Application with a component', () => {
    it('Set Application Name', () => {
      Applications.createApplication(applicationName);
    });

    it('Add a component to Application', () => {
      Applications.createComponent(repoLink, componentName, 'Go', true);
    });
  });

  describe('Trigger a new Pipelinerun related to push event', () => {
    it('Merge the auto-generated PR, and verify the event status on modal', () => {
      componentPage.verifyAndWaitForPRIsSent();

      latestCommitsTabPage.mergePR(
        repoOwner,
        repoName,
        1,
        componentInfo.get('firstCommitTitle'),
        componentInfo.get('firstCommitMessage'),
      );

      componentPage.verifyAndWaitForPRMerge();
      componentPage.closeModal();
    });

    it('Validate the component', () => {
      Applications.checkComponentInListView(
        componentName,
        applicationName,
        'Build Running',
        'Custom',
      );
    });
  });

  describe('Verify and wait for "Pipeline runs" Tab', () => {
    it('Verify the Pipeline run details and Task runs', () => {
      Applications.goToPipelinerunsTab();
      UIhelper.getTableRow('Pipeline run List', 'Running')
        .contains(`${componentName}-on-push`)
        .invoke('text')
        .then((pipelinerunName) => {
          componentInfo.set('firstPipelineRunName', pipelinerunName);
          PipelinerunsTabPage.clickOnRunningPipelinerun(componentName);
          DetailsTab.waitUntilStatusIsNotRunning();
          DetailsTab.checkStatusSucceeded(
            TaskRunsTab.getAdvancedTaskNamesList(componentInfo.get('firstPipelineRunName')),
          );
        });
    });
  });

  describe('Check Component Deployment', () => {
    it('Verify the status code and response body of the deployment URL of each component', () => {
      Applications.clickBreadcrumbLink('Pipeline runs');
      Applications.goToComponentsTab();
      applicationDetailPage.expandDetails(componentName);

      cy.get(applicationDetailPagePO.route(componentName), { timeout: 240000 })
        .invoke('text')
        .then((route) => {
          Common.checkResponseBodyAndStatusCode(
            route,
            componentInfo.get('deploymentBodyOriginal'),
            5000,
          );
        });

      Applications.checkComponentStatus(componentName, 'Build Succeeded');
    });
  });

  describe('Add and edit integration test', () => {
    it('Add integration test and verify', () => {
      UIhelper.clickTab('Integration tests');
      integrationTestsTabPage.clickOnAddIntegrationTestBtn();
      integrationTestsTabPage.addIntegrationTest(
        integrationTestDetails.get('integrationTestName'),
        integrationTestDetails.get('imageBundle'),
        integrationTestDetails.get('pipelineToRun'),
        'check',
      );
      integrationTestsTabPage.verifyRowInIntegrationTestsTable({
        name: integrationTestDetails.get('integrationTestName'),
        ContainerImage: integrationTestDetails.get('imageBundle'),
        optionalForRelease: 'Optional',
        pipelines: integrationTestDetails.get('pipelineToRun'),
      });
    });

    it('Add integration test from Actions and verify', () => {
      Applications.clickActionsDropdown('Add integration test');
      integrationTestsTabPage.addIntegrationTest(
        integrationTestDetails.get('integrationTestNameTemp'),
        integrationTestDetails.get('imageBundle'),
        integrationTestDetails.get('pipelineToRun'),
      );
      integrationTestsTabPage.verifyRowInIntegrationTestsTable({
        name: integrationTestDetails.get('integrationTestNameTemp'),
        ContainerImage: integrationTestDetails.get('imageBundle'),
        optionalForRelease: 'Mandatory',
        pipelines: integrationTestDetails.get('pipelineToRun'),
      });
    });

    it('Edit integration test and verify', () => {
      integrationTestsTabPage.openAndClickKebabMenu(
        integrationTestDetails.get('integrationTestName'),
        'Edit',
      );
      Common.waitForLoad();
      integrationTestsTabPage.editIntegrationTest(
        integrationTestDetails.get('imageBundleEdit'),
        integrationTestDetails.get('pipelineToRunEdit'),
        'uncheck',
      );
      integrationTestsTabPage.verifyRowInIntegrationTestsTable({
        name: integrationTestDetails.get('integrationTestName'),
        ContainerImage: integrationTestDetails.get('imageBundleEdit'),
        optionalForRelease: 'Mandatory',
        pipelines: integrationTestDetails.get('pipelineToRunEdit'),
      });
    });

    it('Delete one of integration test and verify', () => {
      UIhelper.clickLink(integrationTestDetails.get('integrationTestNameTemp'));
      integrationTestsTabPage.deleteIntegrationTestFromActions();
      cy.contains(integrationTestDetails.get('integrationTestNameTemp')).should('not.exist');
    });
  });

  describe('Add a new commit and verify Build Pipeline run', () => {
    it('Add a new commit with changes to a file', () => {
      latestCommitsTabPage.editFile(
        repoLink,
        componentInfo.get('filePath'),
        componentInfo.get('updatedCommitMessage'),
        componentInfo.get('goFileBase64Updated'),
        componentInfo.get('goFileSHAOriginal'),
      );
    });

    it('Verify and wait for the new Pipeline run', () => {
      Applications.goToPipelinerunsTab();
      UIhelper.getTableRow('Pipeline run List', 'Running')
        .contains(`${componentName}-on-push`)
        .invoke('text')
        .then((pipelinerunName) => {
          componentInfo.set('secondPipelineRunName', pipelinerunName);
          PipelinerunsTabPage.clickOnRunningPipelinerun(componentName);
          DetailsTab.waitUntilStatusIsNotRunning();
          DetailsTab.checkStatusSucceeded(
            TaskRunsTab.getAdvancedTaskNamesList(componentInfo.get('secondPipelineRunName')),
          );
        });
    });
  });

  describe('Verify Integration Test Pipeline Runs on Activity Tab', () => {
    it('Verify Integration Test pipeline run Details', () => {
      Applications.clickBreadcrumbLink('Pipeline runs');
      UIhelper.verifyRowInTable('Pipeline run List', `${applicationName}-`, [/^Test$/]);
      UIhelper.clickRowCellInTable(
        'Pipeline run List',
        `${applicationName}-`,
        `${applicationName}-`,
      );
      DetailsTab.waitUntilStatusIsNotRunning();
      UIhelper.verifyLabelAndValue('Status', 'Succeeded');
      UIhelper.verifyLabelAndValue('Pipeline', integrationTestDetails.get('pipelineToRunEdit'));
      UIhelper.verifyLabelAndValue('Related pipelines', '1 pipeline').click();
      PipelinerunsTabPage.verifyRelatedPipelines(componentInfo.get('secondPipelineRunName'));
    });

    it('Verify Integration Test pipeline run graph', () => {
      UIhelper.verifyGraphNodes(integrationTestTaskNames[0]);
      UIhelper.verifyGraphNodes(integrationTestTaskNames[1]);
      UIhelper.verifyGraphNodes(integrationTestTaskNames[2], false);
    });

    it('Verify Integration Test pipeline runs Task runs & Logs Tab', () => {
      UIhelper.clickTab('Task runs');
      TaskRunsTab.assertTaskNamesAndTaskRunStatus([
        {
          name: new RegExp(`${applicationName}-.*-${integrationTestTaskNames[0]}`),
          task: 'test-output',
          status: 'Succeeded',
        },
        {
          name: new RegExp(`${applicationName}-.*-${integrationTestTaskNames[1]}`),
          task: 'test-output',
          status: 'Succeeded',
        },
      ]);
      UIhelper.clickTab('Logs');
      applicationDetailPage.verifyBuildLogTaskslist(integrationTestTaskNames);
    });
  });

  describe('Verify Integration Test Details on Integration tests Tab', () => {
    it('Verify Integration Tests Overview page', () => {
      Applications.clickBreadcrumbLink(applicationName);
      UIhelper.clickTab('Integration tests');
      UIhelper.clickLink(integrationTestDetails.get('integrationTestName'));
      UIhelper.verifyLabelAndValue('Name', integrationTestDetails.get('integrationTestName'));
      UIhelper.verifyLabelAndValue('Image bundle', integrationTestDetails.get('imageBundleEdit'));
      UIhelper.verifyLabelAndValue(
        'Pipeline to run',
        integrationTestDetails.get('pipelineToRunEdit'),
      );
      UIhelper.verifyLabelAndValue('Optional for release', 'Mandatory');
    });

    it('Verify Integration Tests Pipeline runs page', () => {
      UIhelper.clickTab('Pipeline runs');
      UIhelper.verifyRowInTable('Pipeline run List', `${applicationName}-`, [
        /Succeeded/,
        /^Test$/,
      ]);
    });
  });

  describe('Verify new commit updates in Components Tab', () => {
    it('Verify that the component deployment reflects latest changes', () => {
      Applications.clickBreadcrumbLink(applicationName);
      Applications.goToComponentsTab();

      applicationDetailPage.expandDetails(componentName);

      cy.get(applicationDetailPagePO.route(componentName), { timeout: 240000 })
        .invoke('text')
        .then((route) => {
          Common.checkResponseBodyAndStatusCode(
            route,
            componentInfo.get('deploymentBodyUpdated'),
            20000,
            0,
            20,
          );
        });

      Applications.checkComponentStatus(componentName, 'Build Succeeded');
    });
  });

  describe('Verify Latest commits and Pipeline runs in Activity Tab', () => {
    it('Verify the Commits List view should have both the commits', () => {
      Applications.goToLatestCommitsTab();
      UIhelper.verifyRowInTable('Commit List', componentInfo.get('firstCommitTitle'), [
        'main',
        componentName,
        gitHubUser,
        'Succeeded',
      ]);
      UIhelper.verifyRowInTable('Commit List', componentInfo.get('updatedCommitMessage'), [
        'main',
        componentName,
        gitHubUser,
        'Succeeded',
      ]);
    });

    it('Verify the Commit Overview Tab of the Last Commit', () => {
      latestCommitsTabPage.clickOnCommit(componentInfo.get('updatedCommitMessage'));
      latestCommitsTabPage.verifyCommitsPageTitleAndStatus(
        componentInfo.get('updatedCommitMessage'),
      );
      latestCommitsTabPage.verifyCommitID(
        Cypress.env(`${componentInfo.get('updatedCommitMessage')}_SHA`),
        repoLink,
      ); // Commit SHA was stored in dynamic env at latestCommitsTabPage.editFile()
      latestCommitsTabPage.verifyBranch('main', repoLink);
      UIhelper.verifyLabelAndValue('By', gitHubUser);
      UIhelper.verifyLabelAndValue('Status', 'Succeeded');
      latestCommitsTabPage.verifyNodesOnCommitOverview([
        'commit',
        `${componentName}-build`,
        'development',
      ]);
    });

    it('verify the Commit Pipeline runs Tab', () => {
      UIhelper.clickTab('Pipeline runs');
      UIhelper.verifyRowInTable('Pipelinerun List', `${applicationName}-`, ['Succeeded', 'Test']);
      UIhelper.verifyRowInTable('Pipelinerun List', componentInfo.get('secondPipelineRunName'), [
        'Succeeded',
        'Build',
      ]);
    });
  });

  describe('Verify application Lifecycle nodes on Overview page', () => {
    it('check Lifecycle Nodes', () => {
      Applications.clickBreadcrumbLink(applicationName);
      Common.waitForLoad();
      UIhelper.verifyGraphNodes('Components', false);
      UIhelper.verifyGraphNodes('Builds');
      UIhelper.verifyGraphNodes('Tests');
      UIhelper.verifyGraphNodes('Static environments');
    });
  });

  describe('Verify the Recent Commits section on application overview page', () => {
    it('Verify the Commits List view should have both the commits', () => {
      Applications.goToOverviewTab();
      UIhelper.verifyRowInTable('Commit List', componentInfo.get('firstCommitTitle'), [
        'main',
        componentName,
        gitHubUser,
        'Succeeded',
      ]);
      UIhelper.verifyRowInTable('Commit List', componentInfo.get('updatedCommitMessage'), [
        'main',
        componentName,
        gitHubUser,
        'Succeeded',
      ]);
    });

    it('Verify the Commit Overview Tab of the Last Commit', () => {
      latestCommitsTabPage.clickOnCommit(componentInfo.get('updatedCommitMessage'));
      latestCommitsTabPage.verifyCommitsPageTitleAndStatus(
        componentInfo.get('updatedCommitMessage'),
      );
      latestCommitsTabPage.verifyCommitID(
        Cypress.env(`${componentInfo.get('updatedCommitMessage')}_SHA`),
        repoLink,
      );
      latestCommitsTabPage.verifyBranch('main', repoLink);
      latestCommitsTabPage.verifyNodesOnCommitOverview([
        'commit',
        `${componentName}-build`,
        'development',
      ]);
    });

    it('verify the Commit Pipeline runs Tab', () => {
      UIhelper.clickTab('Pipeline runs');
      UIhelper.verifyRowInTable('Pipelinerun List', componentInfo.get('secondPipelineRunName'), [
        'Succeeded',
        'Build',
      ]);
    });
  });
});
